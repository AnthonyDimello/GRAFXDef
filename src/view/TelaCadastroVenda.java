/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import dao.AtendenteDAO;
import dao.ProdutoDAO;
import dao.VendaDAO;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.Produto;
import model.Usuario;
import model.Venda;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;

/**
 * TelaCadastroVenda.java
 * 
 * @author Anthony
 * 
 * 
 * Esta classe representa a interface gráfica para cadastro de Vendas
 * no sistema. Permite ao usuário inserir Descrição do produto / serviço ,
 * nome do cliente , cpf, data da venda , quantidade , forma de pagamento 
 * valor unitario, valor total e nome do atendente , além de limpar os 
 * campos ou retornar à tela anterior.
 * 
 * 
 * A tela é acessada por usuários logados, e a lógica de envio de dados
 * deve ser vinculada ao DAO correspondente.
 */


public class TelaCadastroVenda extends javax.swing.JFrame {
private Usuario usuario;
private JPopupMenu sugestoesPopup = new JPopupMenu();
private JList<Produto> listaSugestoes = new JList<>();
private ProdutoDAO produtoDAO = new ProdutoDAO();

private AtendenteDAO atendenteDAO = new AtendenteDAO(); 
private JPopupMenu popupAtendentes = new JPopupMenu();
private JList<String> listaAtendentes = new JList<>();



    /**
     * Creates new form TelaCadastroVenda
     */
    public TelaCadastroVenda(Usuario usuario) {
        initComponents();
        
        // Valor total da venda não pode ser alterado manualmente
        txtValorTotal.setEditable(false);
        this.usuario = usuario;
        
        // Sugestões dinâmicas para a descrição do produto
        txtDescricao.addKeyListener(new java.awt.event.KeyAdapter() {
    @Override
    public void keyReleased(java.awt.event.KeyEvent e) {
        String texto = txtDescricao.getText();
        if (texto.length() >= 2) {
            List<Produto> resultados = produtoDAO.buscarPorDescricao(texto);
            mostrarSugestoes(resultados);
        } else {
            sugestoesPopup.setVisible(false);
        }
    }
});
        
     // Recalcula o valor total quando a quantidade é alterada    
    txtQuantidade.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
    public void insertUpdate(javax.swing.event.DocumentEvent e) {
        calcularValorTotal();
    }

    public void removeUpdate(javax.swing.event.DocumentEvent e) {
        calcularValorTotal();
    }

    public void changedUpdate(javax.swing.event.DocumentEvent e) {
        calcularValorTotal();
    }
});
       // Sugestões dinâmicas para o nome do atendente
    txtNomeAtendente.addKeyListener(new java.awt.event.KeyAdapter() {
    @Override
    public void keyReleased(java.awt.event.KeyEvent e) {
        String texto = txtNomeAtendente.getText();
        if (texto.length() >= 2) {
            List<String> resultados = atendenteDAO.buscarNomesPorTrecho(texto);
            mostrarSugestoesAtendentes(resultados);
        } else {
            popupAtendentes.setVisible(false);
        }
    }
});
    
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblTelaCadastroVenda = new javax.swing.JLabel();
        lblDescricaoProdutoServico = new javax.swing.JLabel();
        lblNomeCliente = new javax.swing.JLabel();
        txtNomeCliente = new javax.swing.JTextField();
        lblCpf = new javax.swing.JLabel();
        txtCpf = new javax.swing.JTextField();
        lblDataVenda = new javax.swing.JLabel();
        txtDataVenda = new javax.swing.JTextField();
        lblValorUnit = new javax.swing.JLabel();
        lblValorTotal = new javax.swing.JLabel();
        txtValorTotal = new javax.swing.JTextField();
        lblNomeAtendente = new javax.swing.JLabel();
        txtNomeAtendente = new javax.swing.JTextField();
        btnVoltar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnEnviar = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        lblCamposObrigatorios = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        txtFormaPagamento = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtValorUnitario = new javax.swing.JTextField();
        txtDescricao = new javax.swing.JTextField();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(694, 530));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(532, 65));

        lblTelaCadastroVenda.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTelaCadastroVenda.setForeground(new java.awt.Color(255, 255, 255));
        lblTelaCadastroVenda.setText("CADASTRO DE VENDA");
        lblTelaCadastroVenda.setToolTipText("TELA CADASTRO VENDA ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblTelaCadastroVenda)
                .addContainerGap(326, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblTelaCadastroVenda)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        lblTelaCadastroVenda.getAccessibleContext().setAccessibleParent(lblTelaCadastroVenda);

        lblDescricaoProdutoServico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDescricaoProdutoServico.setText("DESCRIÇÃO DO PRODUTO / SERVIÇO*:");
        lblDescricaoProdutoServico.setToolTipText("INSIRA A DESCRIÇÃO DO PRODUTO ");

        lblNomeCliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNomeCliente.setText("NOME DO CLIENTE*:");
        lblNomeCliente.setToolTipText("INSIRA O NOME DO CLIENTE ");

        lblCpf.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCpf.setText("CPF*:");
        lblCpf.setToolTipText("INSIRA O CPF");

        lblDataVenda.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDataVenda.setText("DATA DA VENDA *:");
        lblDataVenda.setToolTipText("INSIRA DATA DA VENDA ");

        lblValorUnit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblValorUnit.setText("VALOR UNIT. R$*:");
        lblValorUnit.setToolTipText("INSIRA O VALOR UNITARIO");

        lblValorTotal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblValorTotal.setText("VALOR TOTAL R$*:");
        lblValorTotal.setToolTipText("INSIRA O VALOR TOTAL");

        lblNomeAtendente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNomeAtendente.setText("NOME DO ATENDENTE*:");
        lblNomeAtendente.setToolTipText("INSIRA O NOME DO ATENDENTE ");

        btnVoltar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnVoltar.setText("VOLTAR");
        btnVoltar.setToolTipText("CLIQUE PARA VOLTAR ");
        btnVoltar.setPreferredSize(new java.awt.Dimension(100, 35));
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnLimpar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLimpar.setText("LIMPAR");
        btnLimpar.setToolTipText("CLIQUE PARA LIMPAR ");
        btnLimpar.setPreferredSize(new java.awt.Dimension(100, 35));
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnEnviar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEnviar.setText("ENVIAR ");
        btnEnviar.setToolTipText("CLIQUE PARA ENVIAR ");
        btnEnviar.setPreferredSize(new java.awt.Dimension(100, 35));
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        lblLogo.setFont(new java.awt.Font("Arial Black", 0, 36)); // NOI18N
        lblLogo.setText("GrafX");
        lblLogo.setToolTipText("LOGO GRAFX");

        lblCamposObrigatorios.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCamposObrigatorios.setForeground(new java.awt.Color(255, 0, 0));
        lblCamposObrigatorios.setText("CAMPOS OBRIGATÓRIOS*");
        lblCamposObrigatorios.setToolTipText("CAMPOS OBRIGATÓRIOS ");

        txtQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQuantidadeFocusLost(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("QUANTIDADE*:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("FORMA DE PAGAMENTO*:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(lblLogo)
                .addGap(21, 21, 21))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(237, 237, 237)
                            .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(55, 55, 55)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(54, 54, 54)
                            .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblDescricaoProdutoServico)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblNomeCliente)
                                        .addComponent(txtNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblDataVenda))
                                            .addGap(32, 32, 32)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtCpf)
                                        .addComponent(txtFormaPagamento)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(6, 6, 6)
                                                    .addComponent(jLabel3))
                                                .addComponent(lblCpf))
                                            .addGap(0, 63, Short.MAX_VALUE))))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblValorUnit)
                                            .addComponent(txtValorUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblValorTotal))
                                        .addGap(19, 19, 19)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblNomeAtendente)
                                            .addComponent(txtNomeAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(lblCamposObrigatorios, javax.swing.GroupLayout.Alignment.TRAILING))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(lblLogo)))
                .addGap(50, 50, 50)
                .addComponent(lblDescricaoProdutoServico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNomeCliente)
                    .addComponent(lblCpf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDataVenda)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDataVenda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(txtQuantidade)
                    .addComponent(txtFormaPagamento, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblValorUnit)
                            .addComponent(lblValorTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtValorTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                            .addComponent(txtValorUnitario)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblNomeAtendente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomeAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCamposObrigatorios)
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        lblNomeCliente.getAccessibleContext().setAccessibleParent(lblNomeCliente);
        btnVoltar.getAccessibleContext().setAccessibleParent(btnVoltar);
        btnLimpar.getAccessibleContext().setAccessibleParent(btnLimpar);
        btnEnviar.getAccessibleContext().setAccessibleParent(btnEnviar);
        lblLogo.getAccessibleContext().setAccessibleParent(lblLogo);
        lblCamposObrigatorios.getAccessibleContext().setAccessibleParent(lblCamposObrigatorios);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método responsável por enviar os dados preenchidos para cadastro.
     * Realiza validações e envia os dados para o DAO.
     * 
     * @param evt Evento de clique no botão "Enviar"
     */
    
    
    
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
  
 String descricao = txtDescricao.getText().trim();
String nomeCliente = txtNomeCliente.getText().trim();
String cpf = txtCpf.getText().trim();
String dataVenda = txtDataVenda.getText().trim();
String quantidadeStr = txtQuantidade.getText().trim();
String formaPagamento = txtFormaPagamento.getText().trim();
String valorUnitarioStr = txtValorUnitario.getText().trim();
String valorTotalStr = txtValorTotal.getText().trim();
String nomeAtendente = txtNomeAtendente.getText().trim();

// Verificação de campos obrigatórios
if (descricao.isEmpty() || nomeCliente.isEmpty() || cpf.isEmpty() || dataVenda.isEmpty() ||
    quantidadeStr.isEmpty() || formaPagamento.isEmpty() || valorUnitarioStr.isEmpty() ||
    valorTotalStr.isEmpty() || nomeAtendente.isEmpty()) {

    JOptionPane.showMessageDialog(this, "Todos os campos são obrigatórios!", "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

// Validação do CPF (XXX.XXX.XXX-XX)
if (!cpf.matches("\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}")) {
    JOptionPane.showMessageDialog(this, "CPF deve estar no formato XXX.XXX.XXX-XX", "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

// Validação da data (DD/MM/AAAA)
if (!dataVenda.matches("\\d{2}/\\d{2}/\\d{4}")) {
    JOptionPane.showMessageDialog(this, "Data deve estar no formato DD/MM/AAAA", "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

// Validação de campos com apenas letras
if (!apenasLetras(nomeCliente)) {
    JOptionPane.showMessageDialog(this, "O campo Nome do Cliente deve conter apenas letras.");
    return;
}
if (!apenasLetras(nomeAtendente)) {
    JOptionPane.showMessageDialog(this, "O campo Nome do Atendente deve conter apenas letras.");
    return;
}

// Validação da quantidade
int quantidade;
try {
    quantidade = Integer.parseInt(quantidadeStr);
    if (quantidade <= 0) throw new NumberFormatException();
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "Quantidade deve ser um número inteiro positivo", "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

// Substituir vírgula por ponto
valorUnitarioStr = valorUnitarioStr.replace(",", ".");
valorTotalStr = valorTotalStr.replace(",", ".");

// Validação do valor unitário
if (!valorUnitarioStr.matches("\\d+(\\.\\d{2})")) {
    JOptionPane.showMessageDialog(this, "Valor Unitário deve estar no formato XXX.XX", "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

double valorUnitario = Double.parseDouble(valorUnitarioStr);
double valorTotal = Double.parseDouble(valorTotalStr);

// Verificar se o produto existe
ProdutoDAO produtoDAO = new ProdutoDAO();
List<Produto> produtos = produtoDAO.buscarPorDescricao(descricao);
if (produtos.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Produto não encontrado. Cadastre o produto antes de registrar a venda.", "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

Produto produtoSelecionado = produtos.get(0); // primeiro produto encontrado
int idProduto = produtoSelecionado.getId();
int estoqueAtual = produtoSelecionado.getQuantidade();

// Verifica se há estoque suficiente
if (quantidade > estoqueAtual) {
    JOptionPane.showMessageDialog(this, "Estoque insuficiente. Estoque atual: " + estoqueAtual, "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

// Atualizar o estoque com base no ID
int novoEstoque = estoqueAtual - quantidade;
boolean estoqueAtualizado = produtoDAO.atualizarEstoque(idProduto, novoEstoque);

if (!estoqueAtualizado) {
    JOptionPane.showMessageDialog(this, "Erro ao atualizar o estoque!", "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

// Criar e salvar venda
Venda venda = new Venda();
venda.setDescricao(descricao);
venda.setClienteNome(nomeCliente);
venda.setCpf(cpf);
venda.setDataVenda(dataVenda);
venda.setQuantidade(quantidade);
venda.setFormaPagamento(formaPagamento);
venda.setValorUnitario(valorUnitario);
venda.setValorTotal(valorTotal);
venda.setAtendente(nomeAtendente);

// Cadastrar a venda
VendaDAO dao = new VendaDAO();
boolean sucesso = dao.cadastrarVenda(venda);

if (sucesso) {
    JOptionPane.showMessageDialog(this, "Venda cadastrada com sucesso!");
    limparCampos();
} else {
    JOptionPane.showMessageDialog(this, "Erro ao cadastrar a venda!", "Erro", JOptionPane.ERROR_MESSAGE);
}



    }//GEN-LAST:event_btnEnviarActionPerformed

    /**
     * Método responsável por limpar todos os campos de entrada da tela.
     * Chamado ao clicar no botão "Limpar".
     * 
     * @param evt Evento de clique no botão "Limpar"
     */
    
    
    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
     limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    /**
     * Método responsável por fechar a tela atual e retornar à anterior.
     * 
     * @param evt Evento de clique no botão "Voltar"
     */
    
    
    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
    TelaInicio inicio = new TelaInicio(usuario); // passe o usuário logado corretamente
    inicio.setVisible(true);
    dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void txtQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantidadeFocusLost
        
    }//GEN-LAST:event_txtQuantidadeFocusLost

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblCamposObrigatorios;
    private javax.swing.JLabel lblCpf;
    private javax.swing.JLabel lblDataVenda;
    private javax.swing.JLabel lblDescricaoProdutoServico;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblNomeAtendente;
    private javax.swing.JLabel lblNomeCliente;
    private javax.swing.JLabel lblTelaCadastroVenda;
    private javax.swing.JLabel lblValorTotal;
    private javax.swing.JLabel lblValorUnit;
    private javax.swing.JTextField txtCpf;
    private javax.swing.JTextField txtDataVenda;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtFormaPagamento;
    private javax.swing.JTextField txtNomeAtendente;
    private javax.swing.JTextField txtNomeCliente;
    private javax.swing.JTextField txtQuantidade;
    private javax.swing.JTextField txtValorTotal;
    private javax.swing.JTextField txtValorUnitario;
    // End of variables declaration//GEN-END:variables

    
 //Limpa todos os campos do formulário de venda
private void limparCampos() {
    txtDescricao.setText("");
    txtNomeCliente.setText("");
    txtCpf.setText("");
    txtDataVenda.setText("");
    txtQuantidade.setText("");
    txtFormaPagamento.setText("");
    txtValorUnitario.setText("");
    txtValorTotal.setText("");
    txtNomeAtendente.setText("");
}

//Calcula o valor total da venda com base no valor unitário e na quantidade.
private void calcularValorTotal() {
    try {
        String valorUnitarioStr = txtValorUnitario.getText().replace(",", ".");
        double valorUnitario = Double.parseDouble(valorUnitarioStr);
        int quantidade = Integer.parseInt(txtQuantidade.getText());

        double valorTotal = valorUnitario * quantidade;

        // Força ponto como separador decimal
        txtValorTotal.setText(String.format(Locale.US, "%.2f", valorTotal));
    } catch (NumberFormatException e) {
        txtValorTotal.setText("0.00");
    }
}


//Verifica se o texto contém apenas letras (com ou sem acento) e espaços.
private boolean apenasLetras(String texto) {
    return texto.matches("[a-zA-ZÀ-ÿ\\s]+"); // Aceita letras com acento e espaços
}

//Exibe uma lista de sugestões de produtos com base na descrição digitada.
private void mostrarSugestoes(List<Produto> produtos) {
    if (produtos.isEmpty()) {
        sugestoesPopup.setVisible(false);
        return;
    }

    DefaultListModel<Produto> modelo = new DefaultListModel<>();
    for (Produto p : produtos) {
        modelo.addElement(p);
    }
    listaSugestoes.setModel(modelo);

    listaSugestoes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    listaSugestoes.removeMouseListener(mouseListenerSugestoes); // evita adicionar múltiplos
    listaSugestoes.addMouseListener(mouseListenerSugestoes);

    sugestoesPopup.removeAll();
    sugestoesPopup.add(new JScrollPane(listaSugestoes));
    sugestoesPopup.show(txtDescricao, 0, txtDescricao.getHeight());
}


/* Listener que trata o clique na lista de sugestões de produtos.
 * Quando um produto é selecionado, preenche os campos de descrição e valor unitário
 * e atualiza o valor total automaticamente.
*/

MouseAdapter mouseListenerSugestoes = new MouseAdapter() {
    @Override
    public void mouseClicked(MouseEvent e) {
        Produto selecionado = listaSugestoes.getSelectedValue();
        if (selecionado != null) {
            txtDescricao.setText(selecionado.getDescricao());

            // Garante o uso de ponto como separador decimal
            txtValorUnitario.setText(String.format(Locale.US, "%.2f", selecionado.getValorUnitario()));

            calcularValorTotal(); // ← Atualiza o valor total
            sugestoesPopup.setVisible(false);
        }
    }
};


// Exibe uma lista de sugestões de atendentes com base no nome digitado.
// Se não houver resultados, o pop-up de sugestões é ocultado.

private void mostrarSugestoesAtendentes(List<String> nomes) {
    if (nomes.isEmpty()) {
        popupAtendentes.setVisible(false);
        return;
    }

    DefaultListModel<String> modelo = new DefaultListModel<>();
    for (String nome : nomes) {
        modelo.addElement(nome);
    }

    listaAtendentes.setModel(modelo);
    listaAtendentes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    listaAtendentes.removeMouseListener(mouseListenerAtendentes);
    listaAtendentes.addMouseListener(mouseListenerAtendentes);

    popupAtendentes.removeAll();
    popupAtendentes.add(new JScrollPane(listaAtendentes));
    popupAtendentes.show(txtNomeAtendente, 0, txtNomeAtendente.getHeight());
}


/*Listener que trata o clique na lista de sugestões de atendentes. 
 * Quando um nome é selecionado, ele é preenchido automaticamente
 * no campo de nome do atendente.
*/


MouseAdapter mouseListenerAtendentes = new MouseAdapter() {
    @Override
    public void mouseClicked(MouseEvent e) {
        String nomeSelecionado = listaAtendentes.getSelectedValue();
        if (nomeSelecionado != null) {
            txtNomeAtendente.setText(nomeSelecionado);
            popupAtendentes.setVisible(false);
        }
    }
};



}
